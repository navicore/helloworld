apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'scala'
apply plugin: 'scalatest'
apply plugin: 'os-package'

version = "99.0.0"
sourceCompatibility = 1.7

ext {
  projectGroup = 'helloworld'
  scalaVersion = '2.10.2'
  SLF4J_VERSION = '1.7.36'
  mainClassName = "com.onextent.helloworld.Main"
}

buildscript {
  repositories {
    jcenter()
    mavenCentral()
  }
  dependencies {
    classpath 'com.netflix.nebula:gradle-ospackage-plugin:1.12.8'
    classpath 'com.github.maiflai:gradle-scalatest:0.4'
  }
}

repositories {
  mavenCentral()
  maven {
    url "http://repo.typesafe.com/typesafe/releases/"
  }
  maven {
    url "http://oss.sonatype.org/content/repositories/releases/"
  }
}

configurations.all {
  resolutionStrategy {
    force "org.scala-lang:scala-library:${scalaVersion}"
  }
}

dependencies {
  compile "org.scala-lang:scala-library:${scalaVersion}"
  compile "org.slf4j:slf4j-api:${SLF4J_VERSION}"
  compile 'com.timgroup:java-statsd-client:3.1.0'
  compile 'log4j:log4j:1.2.17'
  runtime "org.slf4j:slf4j-log4j12:${SLF4J_VERSION}"
  runtime 'com.jcabi:jcabi-log:0.14.3'

  compile ('org.apache.spark:spark-core_2.10:1.1.0') {
    exclude group: 'org.eclipse.jetty'
    exclude group: 'org.apache.hadoop'
    exclude group: 'com.google.protobuf'
  }
  compile ('org.apache.spark:spark-sql_2.10:1.1.0') {
    exclude group: 'org.eclipse.jetty'
    exclude group: 'org.apache.hadoop'
    exclude group: 'com.google.protobuf'
  }
  compile 'net.databinder.dispatch:dispatch-core_2.10:0.11.2'
  compile 'com.netflix.rxjava:rxjava-scala:0.20.5'
  compile 'org.rogach:scallop_2.10:0.9.5'
  compile 'com.rabbitmq:amqp-client:3.3.5'
  compile ('org.apache.hadoop:hadoop-client:2.2.0') {
    exclude group: 'org.eclipse.jetty'
    exclude group: 'javax.servlet'
    //exclude group: 'com.google.protobuf'
  }
  compile 'org.eclipse.jetty.aggregate:jetty-all-server:8.1.14.v20131031'
  compile ('org.scalatra:scalatra-json_2.10:2.3.0') {
    exclude group: 'org.eclipse.jetty'
    exclude group: 'javax.servlet'
  }
  compile ('org.scalatra:scalatra_2.10:2.3.0') {
    exclude group: 'org.eclipse.jetty'
    exclude group: 'javax.servlet'
  }
  compile ('org.scalatra:scalatra-scalate_2.10:2.3.0') {
    exclude group: 'org.eclipse.jetty'
    exclude group: 'javax.servlet'
  }
  compile ('org.scalatra:scalatra-swagger_2.10:2.3.0') {
    exclude group: 'org.eclipse.jetty'
    exclude group: 'javax.servlet'
  }
  compile ('org.fusesource.scalate:scalate-core_2.10:1.6.1') {
    exclude group: 'org.eclipse.jetty'
    exclude group: 'javax.servlet'
  }
  compile 'org.json4s:json4s-native_2.10:3.2.10'
  compile 'net.sf.opencsv:opencsv:2.0'
  compile 'org.scala-lang.modules:scala-async_2.10:0.9.2'
  
  testCompile ('org.scalatra:scalatra-scalatest_2.10:2.3.0') {
    exclude group: 'org.eclipse.jetty'
    exclude group: 'javax.servlet'
  }
  testCompile ('org.scalatest:scalatest_2.10:2.2.2') {
    exclude group: 'org.eclipse.jetty'
    exclude group: 'javax.servlet'
  }
  testRuntime 'org.pegdown:pegdown:1.4.2'
}

ospackage {
  release 'a'
  os = LINUX
  into "/opt/${projectGroup}/${project.name}"
  from('.') {
    user "${project.name}"
  }
  //preInstall file('scripts/rpm/preInstall.sh')
  //postInstall file('scripts/rpm/postInstall.sh')
  //postUninstall file('scripts/rpm/postUninstall.sh')
}

task cleanBuild {
  delete "$buildDir"
}
task cleanRpm {
  delete "$buildDir/distributions"
}
buildRpm {
  packageName = "${projectGroup}-${project.name}"
  dependsOn cleanRpm
  arch = NOARCH
}
task buildTar(dependsOn: 'buildRpm', type: Tar) {
  baseName = "${projectGroup}-" + project.name
  destinationDir = new File(project.buildDir.path + '/brew_installer')
  compression = Compression.GZIP
  from('.') {
    exclude 'build/brew*'
    exclude 'build/distr*'
    exclude 'build/classes*'
  }
}

task copyDeps(type: Copy) {
  into "$buildDir/dist"
  from configurations.runtime
}

task dist(dependsOn: [buildTar]) {
}

jar {
  baseName = "${projectGroup}-${rootProject.name}"
}

task superjar(type: Jar) {
  dependsOn build
  baseName = "${projectGroup}-" + project.name + "-all"
  from files(sourceSets.main.output.classesDir)
  from files(sourceSets.main.output.resourcesDir)
  from(configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }) {
    exclude "META-INF/*.SF"
    exclude "META-INF/*.DSA"
    exclude "META-INF/*.RSA"
  }
}

jar.doFirst {
  manifest {
    attributes 'Implementation-Title': 'GET Reliable',
        'Implementation-Version': version,
        'Built-By': System.getProperty('user.name'),
        'Built-Date': new Date(),
        'Built-JDK': System.getProperty('java.version'),
        'Main-Class': mainClassName
  }
}

superjar.doFirst {
  manifest {
    attributes 'Implementation-Title': 'GET Reliable',
        'Implementation-Version': version,
        'Built-By': System.getProperty('user.name'),
        'Built-Date': new Date(),
        'Built-JDK': System.getProperty('java.version'),
        'Main-Class': mainClassName
  }
}

task idea(overwrite: true) {
  dependsOn ideaProject, ideaWorkspace
}

task genDocs(type: Exec) {
  commandLine "./doc/makedocs"
  standardOutput = new ByteArrayOutputStream()
  doLast {
    String output = standardOutput.toString()
    print(output)
  }
}
task docs {
  dependsOn scaladoc, genDocs
}

task testJar(dependsOn: testClasses, type: Jar) {
  baseName = "${project.name}-tests"
  classifier = 'tests'
  from sourceSets.test.output
}
build.dependsOn.add(testJar)

build.dependsOn.add(copyDeps)
//check.dependsOn.remove(test)
test.ignoreFailures = true
test.fork = true

